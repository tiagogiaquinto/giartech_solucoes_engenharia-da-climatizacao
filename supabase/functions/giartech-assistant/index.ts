import "jsr:@supabase/functions-js/edge-runtime.d.ts"
import { createClient } from "npm:@supabase/supabase-js@2"

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
}

const SYSTEM_IDENTITY = `
# Assistente Giartech - Intelig√™ncia Corporativa

Voc√™ √© o **Assistente Giartech**, criado por Tiago Bruno Giaquinto para a Giartech Solu√ß√µes em Climatiza√ß√£o.
Atua como consultor estrat√©gico e operacional, transformando dados em decis√µes inteligentes.

## Miss√£o
Apoiar nas √°reas: Operacional (OS, t√©cnicos, VRF), Financeira (DRE, fluxo de caixa), Comercial (CRM, contratos) e Estrat√©gica (KPIs, metas).

## Estilo
Tom corporativo, emp√°tico e focado em a√ß√£o. Sempre estruture:
üìä RESUMO EXECUTIVO - pontos-chave
üìà AN√ÅLISE - dados e tend√™ncias
üí° RECOMENDA√á√ïES - a√ß√µes pr√°ticas
‚ö†Ô∏è RISCOS - pontos de aten√ß√£o
üéØ PR√ìXIMOS PASSOS - cronograma
üìö FONTES - origem dos dados

Voc√™ √© o elo entre dados e decis√£o!
`

interface ChatMessage {
  role: 'user' | 'assistant' | 'system'
  content: string
}

interface AssistantRequest {
  message: string
  conversationId?: string
  userId?: string
  context?: any
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: corsHeaders })
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseKey)

    const { message, conversationId, userId, context } = await req.json() as AssistantRequest

    if (!message) {
      return new Response(
        JSON.stringify({ error: "Message is required" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      )
    }

    // 1. Analisar a inten√ß√£o do usu√°rio
    const intent = await analyzeIntent(message)

    // 2. Buscar dados relevantes do sistema
    const systemData = await gatherSystemData(intent, supabase)

    // 3. Buscar informa√ß√µes externas se necess√°rio
    let externalData = null
    if (intent.needsExternalSearch) {
      externalData = await searchWeb(intent.query)
    }

    // 4. Gerar resposta contextualizada
    const response = await generateResponse(message, systemData, externalData, intent)

    // 5. Salvar no hist√≥rico
    await saveConversation(conversationId || crypto.randomUUID(), userId, message, response, supabase)

    return new Response(
      JSON.stringify({
        success: true,
        response,
        intent: intent.type,
        timestamp: new Date().toISOString()
      }),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    )

  } catch (error) {
    console.error("Error:", error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    )
  }
})

// Analisa a inten√ß√£o do usu√°rio
async function analyzeIntent(message: string): Promise<any> {
  const lowerMessage = message.toLowerCase()

  // An√°lise de inten√ß√£o baseada em palavras-chave
  const intents = {
    financial: ['financeiro', 'dre', 'receita', 'despesa', 'lucro', 'faturamento', 'custos'],
    serviceOrders: ['ordem', 'os', 'servi√ßo', 'atendimento', 't√©cnico', 'manuten√ß√£o'],
    inventory: ['estoque', 'material', 'produto', 'invent√°rio', 'pe√ßa'],
    clients: ['cliente', 'contato', 'crm', 'lead', 'proposta'],
    employees: ['funcion√°rio', 't√©cnico', 'equipe', 'colaborador', 'rh'],
    analytics: ['an√°lise', 'relat√≥rio', 'indicador', 'kpi', 'dashboard', 'desempenho'],
    calendar: ['agenda', 'evento', 'compromisso', 'agendamento', 'calend√°rio', 'reuni√£o', 'encontro', 'hor√°rio', 'hoje', 'amanh√£', 'semana'],
    comparison: ['comparar', 'diferen√ßa', 'versus', 'vs', 'melhor'],
    prediction: ['previs√£o', 'tend√™ncia', 'proje√ß√£o', 'futuro', 'pr√≥ximo']
  }

  let detectedIntent = 'general'
  let needsExternalSearch = false

  for (const [intentType, keywords] of Object.entries(intents)) {
    if (keywords.some(keyword => lowerMessage.includes(keyword))) {
      detectedIntent = intentType
      break
    }
  }

  // Detecta se precisa de busca externa
  if (lowerMessage.includes('mercado') ||
      lowerMessage.includes('concorrente') ||
      lowerMessage.includes('norma') ||
      lowerMessage.includes('pre√ßo de mercado') ||
      lowerMessage.includes('legisla√ß√£o')) {
    needsExternalSearch = true
  }

  return {
    type: detectedIntent,
    needsExternalSearch,
    query: message
  }
}

// Busca dados do sistema
async function gatherSystemData(intent: any, supabase: any): Promise<any> {
  const data: any = {}

  try {
    switch (intent.type) {
      case 'financial':
        // Buscar dados financeiros
        const { data: financeData } = await supabase
          .from('finance_entries')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(100)

        data.finance = financeData || []

        // Buscar resumo do DRE
        const { data: summary } = await supabase
          .rpc('get_financial_summary')
          .single()

        data.financialSummary = summary
        break

      case 'serviceOrders':
        // Buscar ordens de servi√ßo
        const { data: orders } = await supabase
          .from('service_orders')
          .select(`
            *,
            customers (name, phone),
            service_order_items (*)
          `)
          .order('created_at', { ascending: false })
          .limit(50)

        data.serviceOrders = orders || []
        break

      case 'inventory':
        // Buscar estoque
        const { data: inventory } = await supabase
          .from('inventory_items')
          .select('*')
          .order('quantity', { ascending: true })
          .limit(100)

        data.inventory = inventory || []
        break

      case 'clients':
        // Buscar clientes
        const { data: customers } = await supabase
          .from('customers')
          .select('*')
          .order('created_at', { ascending: false })
          .limit(100)

        data.customers = customers || []
        break

      case 'employees':
        // Buscar funcion√°rios
        const { data: employees } = await supabase
          .from('employees')
          .select('*')
          .eq('is_active', true)

        data.employees = employees || []
        break

      case 'analytics':
        // Buscar KPIs e m√©tricas
        const { data: kpis } = await supabase
          .from('v_business_kpis')
          .select('*')
          .single()

        data.kpis = kpis
        break

      case 'calendar':
        // Buscar eventos da agenda
        const today = new Date()
        today.setHours(0, 0, 0, 0)

        const nextWeek = new Date(today)
        nextWeek.setDate(nextWeek.getDate() + 7)

        const { data: agendaEvents } = await supabase
          .from('agenda_events')
          .select(`
            *,
            customers (name, phone),
            employees (name, position),
            service_orders (order_number, status)
          `)
          .gte('start_time', today.toISOString())
          .lte('start_time', nextWeek.toISOString())
          .order('start_time', { ascending: true })

        data.agendaEvents = agendaEvents || []

        // Buscar eventos de hoje especificamente
        const tomorrow = new Date(today)
        tomorrow.setDate(tomorrow.getDate() + 1)

        const { data: todayEvents } = await supabase
          .from('agenda_events')
          .select(`
            *,
            customers (name, phone),
            employees (name, position),
            service_orders (order_number, status)
          `)
          .gte('start_time', today.toISOString())
          .lt('start_time', tomorrow.toISOString())
          .order('start_time', { ascending: true })

        data.todayEvents = todayEvents || []
        break
    }

    // Sempre buscar dados gerais da empresa
    const { data: companySettings } = await supabase
      .from('company_settings')
      .select('*')
      .single()

    data.company = companySettings

  } catch (error) {
    console.error('Error gathering system data:', error)
  }

  return data
}

// Busca informa√ß√µes na web
async function searchWeb(query: string): Promise<any> {
  // Implementar busca na web usando API de busca
  // Por enquanto, retorna null (ser√° implementado com API externa)
  console.log('Web search:', query)
  return null
}

// Gera resposta contextualizada
async function generateResponse(
  message: string,
  systemData: any,
  externalData: any,
  intent: any
): Promise<string> {
  // Montar contexto para resposta
  let response = ''

  // Identifica√ß√£o
  response += 'ü§ñ **Assistente Giartech**\n\n'

  // An√°lise baseada na inten√ß√£o
  switch (intent.type) {
    case 'financial':
      response += await analyzeFinancialData(message, systemData)
      break

    case 'serviceOrders':
      response += await analyzeServiceOrders(message, systemData)
      break

    case 'inventory':
      response += await analyzeInventory(message, systemData)
      break

    case 'clients':
      response += await analyzeClients(message, systemData)
      break

    case 'employees':
      response += await analyzeEmployees(message, systemData)
      break

    case 'analytics':
      response += await analyzeKPIs(message, systemData)
      break

    case 'calendar':
      response += await analyzeCalendar(message, systemData)
      break

    default:
      response += await generateGeneralResponse(message, systemData)
  }

  // Adicionar informa√ß√µes externas se dispon√≠veis
  if (externalData) {
    response += '\n\nüìä **Contexto de Mercado:**\n' + externalData
  }

  return response
}

// An√°lise financeira
async function analyzeFinancialData(message: string, data: any): Promise<string> {
  let response = 'üßæ **AN√ÅLISE FINANCEIRA GIARTECH**\n\n'

  // RESUMO EXECUTIVO
  if (data.financialSummary) {
    const summary = data.financialSummary
    const revenue = summary.total_revenue || 0
    const expenses = summary.total_expenses || 0
    const profit = revenue - expenses
    const margin = revenue > 0 ? (profit / revenue * 100) : 0

    response += 'üìä **RESUMO EXECUTIVO**\n'
    response += `‚Ä¢ Receita Total: R$ ${revenue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n`
    response += `‚Ä¢ Despesas: R$ ${expenses.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n`
    response += `‚Ä¢ Lucro L√≠quido: R$ ${profit.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n`
    response += `‚Ä¢ Margem: ${margin.toFixed(2)}%\n\n`
  }

  // AN√ÅLISE E DIAGN√ìSTICO
  if (data.finance && data.finance.length > 0) {
    const pendingPayments = data.finance.filter((f: any) => f.status === 'pending' && f.type === 'expense')
    const pendingReceivables = data.finance.filter((f: any) => f.status === 'pending' && f.type === 'income')
    const totalPayable = pendingPayments.reduce((sum: number, f: any) => sum + (f.amount || 0), 0)
    const totalReceivable = pendingReceivables.reduce((sum: number, f: any) => sum + (f.amount || 0), 0)

    response += 'üìà **AN√ÅLISE E DIAGN√ìSTICO**\n'
    response += `‚Ä¢ Contas a Pagar: ${pendingPayments.length} (R$ ${totalPayable.toLocaleString('pt-BR', { minimumFractionDigits: 2 })})\n`
    response += `‚Ä¢ Contas a Receber: ${pendingReceivables.length} (R$ ${totalReceivable.toLocaleString('pt-BR', { minimumFractionDigits: 2 })})\n`
    response += `‚Ä¢ Saldo Projetado: R$ ${(totalReceivable - totalPayable).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n\n`

    // RECOMENDA√á√ïES
    response += 'üí° **RECOMENDA√á√ïES ESTRAT√âGICAS**\n'
    if (totalPayable > totalReceivable) {
      response += `‚ö†Ô∏è Contas a pagar excedem receb√≠veis em R$ ${(totalPayable - totalReceivable).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n`
      response += '‚Ä¢ A√ß√£o 1: Intensificar cobran√ßas de valores em aberto\n'
      response += '‚Ä¢ A√ß√£o 2: Negociar prazos com fornecedores quando poss√≠vel\n'
      response += '‚Ä¢ A√ß√£o 3: Priorizar recebimentos de maior valor\n'
    } else {
      response += '‚úÖ Fluxo de caixa positivo no per√≠odo\n'
      response += '‚Ä¢ Manter controle rigoroso de pagamentos\n'
      response += '‚Ä¢ Considerar investimento em estoque ou equipamentos\n'
    }
    response += '\n'

    // PR√ìXIMOS PASSOS
    response += 'üéØ **PR√ìXIMOS PASSOS**\n'
    response += '1. Revisar todas contas vencidas (hoje)\n'
    response += '2. Atualizar DRE do m√™s (semanal)\n'
    response += '3. Reuni√£o financeira com equipe (mensal)\n\n'

    // FONTES
    response += 'üìö **FONTES**\n'
    response += '‚Ä¢ finance_entries (√∫ltimos lan√ßamentos)\n'
    response += '‚Ä¢ financial_summary (consolidado)\n'
  } else {
    response += '‚ö†Ô∏è **OBSERVA√á√ÉO:** Nenhum lan√ßamento financeiro encontrado no per√≠odo.\n'
  }

  return response
}

// An√°lise de ordens de servi√ßo
async function analyzeServiceOrders(message: string, data: any): Promise<string> {
  let response = '‚öôÔ∏è **AN√ÅLISE DE ORDENS DE SERVI√áO**\n\n'

  if (data.serviceOrders && data.serviceOrders.length > 0) {
    const orders = data.serviceOrders

    const byStatus = {
      pending: orders.filter((o: any) => o.status === 'pending').length,
      in_progress: orders.filter((o: any) => o.status === 'in_progress').length,
      completed: orders.filter((o: any) => o.status === 'completed').length,
      cancelled: orders.filter((o: any) => o.status === 'cancelled').length
    }

    const totalValue = orders.reduce((sum: number, o: any) => sum + (o.total_amount || o.total_value || 0), 0)
    const avgValue = totalValue / orders.length

    // RESUMO EXECUTIVO
    response += 'üìä **RESUMO EXECUTIVO**\n'
    response += `‚Ä¢ Total de OSs: ${orders.length}\n`
    response += `‚Ä¢ Em Execu√ß√£o: ${byStatus.pending + byStatus.in_progress}\n`
    response += `‚Ä¢ Valor Total: R$ ${totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n`
    response += `‚Ä¢ Ticket M√©dio: R$ ${avgValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n\n`

    // AN√ÅLISE POR STATUS
    response += 'üìà **AN√ÅLISE E DIAGN√ìSTICO**\n'
    response += `‚Ä¢ Pendentes: ${byStatus.pending} OSs\n`
    response += `‚Ä¢ Em Andamento: ${byStatus.in_progress} OSs\n`
    response += `‚Ä¢ Conclu√≠das: ${byStatus.completed} OSs\n`
    response += `‚Ä¢ Taxa de Conclus√£o: ${((byStatus.completed / orders.length) * 100).toFixed(1)}%\n\n`

    // RECOMENDA√á√ïES
    response += 'üí° **RECOMENDA√á√ïES ESTRAT√âGICAS**\n'
    if (byStatus.pending > 10) {
      response += `‚ö†Ô∏è ${byStatus.pending} OSs pendentes - alocar mais t√©cnicos\n`
      response += '‚Ä¢ A√ß√£o 1: Redistribuir carga entre equipe\n'
      response += '‚Ä¢ A√ß√£o 2: Priorizar por valor e urg√™ncia\n'
    }
    if (byStatus.in_progress > 15) {
      response += `‚ö†Ô∏è ${byStatus.in_progress} OSs em execu√ß√£o - focar em conclus√£o\n`
      response += '‚Ä¢ A√ß√£o 1: Revisar OSs paradas h√° mais de 7 dias\n'
      response += '‚Ä¢ A√ß√£o 2: Agilizar fechamento para liberar equipe\n'
    }
    if (byStatus.completed > byStatus.pending + byStatus.in_progress) {
      response += '‚úÖ Boa performance de conclus√£o\n'
      response += '‚Ä¢ Manter ritmo atual de produtividade\n'
    }
    response += '\n'

    // PR√ìXIMOS PASSOS
    response += 'üéØ **PR√ìXIMOS PASSOS**\n'
    response += '1. Revisar OSs pendentes e alocar recursos (di√°rio)\n'
    response += '2. Atualizar clientes sobre andamento (a cada 2 dias)\n'
    response += '3. Reuni√£o de alinhamento com t√©cnicos (semanal)\n\n'

    // FONTES
    response += 'üìö **FONTES**\n'
    response += `‚Ä¢ service_orders (${orders.length} registros analisados)\n`
  } else {
    response += '‚ö†Ô∏è **OBSERVA√á√ÉO:** Nenhuma ordem de servi√ßo encontrada no per√≠odo.\n'
  }

  return response
}

// An√°lise de estoque
async function analyzeInventory(message: string, data: any): Promise<string> {
  let response = 'üì¶ **An√°lise de Estoque**\n\n'

  if (data.inventory && data.inventory.length > 0) {
    const lowStock = data.inventory.filter((i: any) => i.quantity <= (i.minimum_stock || 5))
    const outOfStock = data.inventory.filter((i: any) => i.quantity === 0)

    response += `üìä **Status do Estoque:**\n`
    response += `‚Ä¢ Total de itens: ${data.inventory.length}\n`
    response += `‚Ä¢ Estoque baixo: ${lowStock.length}\n`
    response += `‚Ä¢ Sem estoque: ${outOfStock.length}\n\n`

    if (lowStock.length > 0) {
      response += `‚ö†Ô∏è **Itens com Estoque Baixo:**\n`
      lowStock.slice(0, 5).forEach((item: any) => {
        response += `‚Ä¢ ${item.name} - Qtd: ${item.quantity} ${item.unit || ''}\n`
      })
      response += '\n'
    }

    response += `üí° **Recomenda√ß√£o:**\n`
    if (lowStock.length > 0) {
      response += `H√° ${lowStock.length} itens com estoque baixo. Programe reposi√ß√£o urgente.\n`
    }
    if (outOfStock.length > 0) {
      response += `${outOfStock.length} itens zerados podem impactar atendimentos. Priorize compra.\n`
    }
  }

  return response
}

// An√°lise de clientes
async function analyzeClients(message: string, data: any): Promise<string> {
  let response = 'üë• **An√°lise de Clientes**\n\n'

  if (data.customers && data.customers.length > 0) {
    response += `üìä **Base de Clientes:**\n`
    response += `‚Ä¢ Total de clientes: ${data.customers.length}\n\n`

    const recentClients = data.customers.filter((c: any) => {
      const created = new Date(c.created_at)
      const thirtyDaysAgo = new Date()
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)
      return created > thirtyDaysAgo
    })

    response += `üìà **√öltimos 30 dias:**\n`
    response += `‚Ä¢ Novos clientes: ${recentClients.length}\n\n`

    response += `üí° **Insights:**\n`
    if (recentClients.length > 10) {
      response += `Excelente! ${recentClients.length} novos clientes no √∫ltimo m√™s. Mantenha as estrat√©gias de capta√ß√£o.\n`
    } else if (recentClients.length < 5) {
      response += `Apenas ${recentClients.length} novos clientes no m√™s. Considere intensificar a√ß√µes comerciais.\n`
    }
  }

  return response
}

// An√°lise de funcion√°rios
async function analyzeEmployees(message: string, data: any): Promise<string> {
  let response = 'üë®‚Äçüíº **An√°lise de Equipe**\n\n'

  if (data.employees && data.employees.length > 0) {
    response += `üìä **Equipe Ativa:**\n`
    response += `‚Ä¢ Total de colaboradores: ${data.employees.length}\n\n`

    const byPosition = data.employees.reduce((acc: any, emp: any) => {
      acc[emp.position] = (acc[emp.position] || 0) + 1
      return acc
    }, {})

    response += `üìã **Por Cargo:**\n`
    Object.entries(byPosition).forEach(([position, count]) => {
      response += `‚Ä¢ ${position}: ${count}\n`
    })
  }

  return response
}

// An√°lise de KPIs
async function analyzeKPIs(message: string, data: any): Promise<string> {
  let response = 'üìä **Indicadores de Desempenho**\n\n'

  if (data.kpis) {
    response += `üéØ **KPIs Principais:**\n`
    response += `‚Ä¢ Taxa de convers√£o: ${data.kpis.conversion_rate?.toFixed(2) || '0'}%\n`
    response += `‚Ä¢ Ticket m√©dio: R$ ${data.kpis.average_ticket?.toLocaleString('pt-BR', { minimumFractionDigits: 2 }) || '0,00'}\n`
    response += `‚Ä¢ Satisfa√ß√£o do cliente: ${data.kpis.customer_satisfaction?.toFixed(1) || '0'}/10\n`
  }

  return response
}

// Resposta geral
async function generateGeneralResponse(message: string, data: any): Promise<string> {
  let response = ''

  if (data.company) {
    response += `Ol√°! Sou o Assistente Giartech da **${data.company.company_name}**.\n\n`
  }

  response += 'Como posso ajud√°-lo hoje? Posso fornecer informa√ß√µes sobre:\n\n'
  response += 'üí∞ Financeiro (receitas, despesas, DRE)\n'
  response += 'üîß Ordens de Servi√ßo\n'
  response += 'üì¶ Estoque e Materiais\n'
  response += 'üë• Clientes e CRM\n'
  response += 'üë®‚Äçüíº Equipe e Colaboradores\n'
  response += 'üìä Indicadores e An√°lises\n'
  response += 'üìÖ Agenda e Compromissos\n\n'
  response += 'Basta fazer sua pergunta!'

  return response
}

// An√°lise de agenda
async function analyzeCalendar(message: string, data: any): Promise<string> {
  let response = 'üìÖ **An√°lise de Agenda**\n\n'

  const lowerMessage = message.toLowerCase()
  const isToday = lowerMessage.includes('hoje') || lowerMessage.includes('agora')
  const isTomorrow = lowerMessage.includes('amanh√£')
  const isWeek = lowerMessage.includes('semana')

  // Eventos de hoje
  if (data.todayEvents && data.todayEvents.length > 0 && (isToday || !isWeek)) {
    response += 'üìÜ **Hoje:**\n'

    if (data.todayEvents.length === 0) {
      response += '‚úÖ Nenhum compromisso agendado para hoje.\n\n'
    } else {
      response += `üìç ${data.todayEvents.length} ${data.todayEvents.length === 1 ? 'evento agendado' : 'eventos agendados'}:\n\n`

      data.todayEvents.slice(0, 5).forEach((event: any) => {
        const startTime = new Date(event.start_time)
        const timeStr = startTime.toLocaleTimeString('pt-BR', {
          hour: '2-digit',
          minute: '2-digit'
        })

        response += `‚è∞ **${timeStr}** - ${event.title}\n`

        if (event.customers?.name) {
          response += `   üë§ Cliente: ${event.customers.name}\n`
        }

        if (event.employees?.name) {
          response += `   üë®‚Äçüîß Respons√°vel: ${event.employees.name}\n`
        }

        if (event.service_orders?.order_number) {
          response += `   üìã OS: ${event.service_orders.order_number}\n`
        }

        if (event.location) {
          response += `   üìç Local: ${event.location}\n`
        }

        response += '\n'
      })

      if (data.todayEvents.length > 5) {
        response += `... e mais ${data.todayEvents.length - 5} eventos.\n\n`
      }
    }
  }

  // Eventos da semana
  if (data.agendaEvents && data.agendaEvents.length > 0 && (isWeek || !isToday)) {
    const byDay: { [key: string]: any[] } = {}

    data.agendaEvents.forEach((event: any) => {
      const date = new Date(event.start_time)
      const dateKey = date.toLocaleDateString('pt-BR', {
        weekday: 'long',
        day: '2-digit',
        month: '2-digit'
      })

      if (!byDay[dateKey]) {
        byDay[dateKey] = []
      }
      byDay[dateKey].push(event)
    })

    response += 'üìä **Pr√≥ximos 7 Dias:**\n'
    response += `‚Ä¢ Total de eventos: ${data.agendaEvents.length}\n`
    response += `‚Ä¢ Dias com agenda: ${Object.keys(byDay).length}\n\n`

    response += 'üìã **Resumo por Dia:**\n'
    Object.entries(byDay).slice(0, 7).forEach(([day, events]) => {
      response += `‚Ä¢ ${day}: ${events.length} ${events.length === 1 ? 'evento' : 'eventos'}\n`
    })
    response += '\n'
  }

  // Estat√≠sticas e insights
  if (data.agendaEvents && data.agendaEvents.length > 0) {
    const serviceOrderEvents = data.agendaEvents.filter((e: any) => e.service_order_id)
    const clientMeetings = data.agendaEvents.filter((e: any) => e.customer_id && !e.service_order_id)

    response += 'üìà **Insights:**\n'

    if (serviceOrderEvents.length > 0) {
      response += `‚Ä¢ ${serviceOrderEvents.length} eventos vinculados a OSs\n`
    }

    if (clientMeetings.length > 0) {
      response += `‚Ä¢ ${clientMeetings.length} reuni√µes com clientes\n`
    }

    // Verificar conflitos de hor√°rio
    let hasConflicts = false
    for (let i = 0; i < data.agendaEvents.length - 1; i++) {
      const current = data.agendaEvents[i]
      const next = data.agendaEvents[i + 1]

      const currentEnd = new Date(current.end_time || current.start_time)
      const nextStart = new Date(next.start_time)

      if (currentEnd > nextStart && current.employee_id === next.employee_id) {
        hasConflicts = true
        break
      }
    }

    if (hasConflicts) {
      response += `‚ö†Ô∏è Aten√ß√£o: Poss√≠veis conflitos de hor√°rio detectados\n`
    }

    response += '\n'
  }

  // Recomenda√ß√µes
  if (data.todayEvents && data.todayEvents.length > 5) {
    response += 'üí° **Recomenda√ß√£o:**\n'
    response += `Dia com ${data.todayEvents.length} compromissos. Considere priorizar e reagendar se necess√°rio.\n`
  }

  if (!data.todayEvents || data.todayEvents.length === 0) {
    response += '‚ú® **Dica:**\n'
    response += 'Agenda livre hoje! Bom momento para planejamento ou tarefas administrativas.\n'
  }

  return response
}

// Salva conversa no hist√≥rico
async function saveConversation(
  conversationId: string,
  userId: string | undefined,
  userMessage: string,
  assistantResponse: string,
  supabase: any
) {
  try {
    await supabase.from('giartech_conversations').insert([
      {
        conversation_id: conversationId,
        user_id: userId,
        user_message: userMessage,
        assistant_response: assistantResponse,
        created_at: new Date().toISOString()
      }
    ])
  } catch (error) {
    console.error('Error saving conversation:', error)
  }
}
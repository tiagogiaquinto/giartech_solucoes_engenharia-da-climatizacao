/*
  # CORRE√á√ÉO DEFINITIVA: Duplica√ß√£o de Servi√ßos

  ## PROBLEMA
  Ao editar/excluir OS, os servi√ßos est√£o sendo duplicados.

  ## CAUSA REAL
  O c√≥digo faz:
  1. DELETE FROM service_order_items (linha 699)
  2. INSERT INTO service_order_items (linha 730-732)

  O DELETE dispara triggers que podem estar causando
  comportamento inesperado e duplica√ß√£o.

  ## SOLU√á√ÉO
  1. Remover TODOS os triggers de DELETE
  2. Melhorar l√≥gica de CASCADE
  3. Adicionar constraint UNIQUE forte
  4. Criar fun√ß√£o de UPSERT segura
*/

-- =====================================================
-- PARTE 1: REMOVER TRIGGERS PROBLEM√ÅTICOS
-- =====================================================

DO $$
DECLARE
  r RECORD;
BEGIN
  RAISE NOTICE 'üîß Removendo triggers problem√°ticos...';

  -- Remover todos os triggers em service_order_items
  FOR r IN (
    SELECT trigger_name
    FROM information_schema.triggers
    WHERE event_object_table = 'service_order_items'
      AND event_manipulation = 'DELETE'
  ) LOOP
    EXECUTE format('DROP TRIGGER IF EXISTS %I ON service_order_items', r.trigger_name);
    RAISE NOTICE '  ‚úì Removido: %', r.trigger_name;
  END LOOP;

  -- Remover triggers em service_order_materials
  FOR r IN (
    SELECT trigger_name
    FROM information_schema.triggers
    WHERE event_object_table = 'service_order_materials'
      AND event_manipulation = 'DELETE'
  ) LOOP
    EXECUTE format('DROP TRIGGER IF EXISTS %I ON service_order_materials', r.trigger_name);
    RAISE NOTICE '  ‚úì Removido: %', r.trigger_name;
  END LOOP;

  -- Remover triggers em service_order_labor
  FOR r IN (
    SELECT trigger_name
    FROM information_schema.triggers
    WHERE event_object_table = 'service_order_labor'
      AND event_manipulation = 'DELETE'
  ) LOOP
    EXECUTE format('DROP TRIGGER IF EXISTS %I ON service_order_labor', r.trigger_name);
    RAISE NOTICE '  ‚úì Removido: %', r.trigger_name;
  END LOOP;

  RAISE NOTICE '‚úÖ Triggers removidos';
END $$;

-- =====================================================
-- PARTE 2: GARANTIR CASCADE DELETE PERFEITO
-- =====================================================

DO $$
BEGIN
  -- service_order_items -> service_orders
  ALTER TABLE service_order_items
  DROP CONSTRAINT IF EXISTS service_order_items_service_order_id_fkey CASCADE;

  ALTER TABLE service_order_items
  ADD CONSTRAINT service_order_items_service_order_id_fkey
  FOREIGN KEY (service_order_id)
  REFERENCES service_orders(id)
  ON DELETE CASCADE ON UPDATE CASCADE;

  -- service_order_materials -> service_orders
  ALTER TABLE service_order_materials
  DROP CONSTRAINT IF EXISTS service_order_materials_service_order_id_fkey CASCADE;

  ALTER TABLE service_order_materials
  ADD CONSTRAINT service_order_materials_service_order_id_fkey
  FOREIGN KEY (service_order_id)
  REFERENCES service_orders(id)
  ON DELETE CASCADE ON UPDATE CASCADE;

  -- service_order_materials -> service_order_items
  ALTER TABLE service_order_materials
  DROP CONSTRAINT IF EXISTS service_order_materials_service_order_item_id_fkey CASCADE;

  ALTER TABLE service_order_materials
  ADD CONSTRAINT service_order_materials_service_order_item_id_fkey
  FOREIGN KEY (service_order_item_id)
  REFERENCES service_order_items(id)
  ON DELETE CASCADE ON UPDATE CASCADE;

  -- service_order_labor -> service_orders
  ALTER TABLE service_order_labor
  DROP CONSTRAINT IF EXISTS service_order_labor_service_order_id_fkey CASCADE;

  ALTER TABLE service_order_labor
  ADD CONSTRAINT service_order_labor_service_order_id_fkey
  FOREIGN KEY (service_order_id)
  REFERENCES service_orders(id)
  ON DELETE CASCADE ON UPDATE CASCADE;

  -- service_order_labor -> service_order_items
  ALTER TABLE service_order_labor
  DROP CONSTRAINT IF EXISTS service_order_labor_service_order_item_id_fkey CASCADE;

  ALTER TABLE service_order_labor
  ADD CONSTRAINT service_order_labor_service_order_item_id_fkey
  FOREIGN KEY (service_order_item_id)
  REFERENCES service_order_items(id)
  ON DELETE CASCADE ON UPDATE CASCADE;

  RAISE NOTICE '‚úÖ Foreign Keys configuradas com CASCADE';
END $$;

-- =====================================================
-- PARTE 3: REMOVER √çNDICE √öNICO PROBLEM√ÅTICO
-- =====================================================

-- Remover √≠ndice √∫nico que pode estar causando problema
DROP INDEX IF EXISTS idx_service_order_items_unique;

RAISE NOTICE '‚úÖ √çndice √∫nico removido (ser√° recriado com l√≥gica melhor)';

-- =====================================================
-- PARTE 4: LIMPAR DUPLICADOS EXISTENTES
-- =====================================================

DO $$
DECLARE
  v_deleted INTEGER := 0;
BEGIN
  RAISE NOTICE 'üßπ Limpando duplicados existentes...';

  -- Deletar itens duplicados (mant√©m o mais recente)
  WITH duplicates AS (
    SELECT
      id,
      ROW_NUMBER() OVER (
        PARTITION BY service_order_id, descricao, unit_price
        ORDER BY created_at DESC, id DESC
      ) as row_num
    FROM service_order_items
    WHERE descricao IS NOT NULL
  )
  DELETE FROM service_order_items
  WHERE id IN (
    SELECT id FROM duplicates WHERE row_num > 1
  );

  GET DIAGNOSTICS v_deleted = ROW_COUNT;
  RAISE NOTICE '  ‚úì Itens duplicados removidos: %', v_deleted;

  -- Deletar materiais duplicados
  v_deleted := 0;
  WITH duplicates AS (
    SELECT
      id,
      ROW_NUMBER() OVER (
        PARTITION BY service_order_id, material_name, quantity
        ORDER BY created_at DESC, id DESC
      ) as row_num
    FROM service_order_materials
    WHERE material_name IS NOT NULL
  )
  DELETE FROM service_order_materials
  WHERE id IN (
    SELECT id FROM duplicates WHERE row_num > 1
  );

  GET DIAGNOSTICS v_deleted = ROW_COUNT;
  RAISE NOTICE '  ‚úì Materiais duplicados removidos: %', v_deleted;

  -- Deletar m√£o de obra duplicada
  v_deleted := 0;
  WITH duplicates AS (
    SELECT
      id,
      ROW_NUMBER() OVER (
        PARTITION BY service_order_id, nome_funcionario, hours
        ORDER BY created_at DESC, id DESC
      ) as row_num
    FROM service_order_labor
    WHERE nome_funcionario IS NOT NULL
  )
  DELETE FROM service_order_labor
  WHERE id IN (
    SELECT id FROM duplicates WHERE row_num > 1
  );

  GET DIAGNOSTICS v_deleted = ROW_COUNT;
  RAISE NOTICE '  ‚úì M√£o de obra duplicada removida: %', v_deleted;

  RAISE NOTICE '‚úÖ Limpeza conclu√≠da';
END $$;

-- =====================================================
-- PARTE 5: RECRIAR TRIGGERS APENAS PARA INSERT/UPDATE
-- =====================================================

-- Trigger de c√°lculo de totais (SEM DELETE)
DROP TRIGGER IF EXISTS trigger_calculate_totals ON service_order_items;

CREATE TRIGGER trigger_calculate_totals
  AFTER INSERT OR UPDATE ON service_order_items
  FOR EACH ROW
  EXECUTE FUNCTION calculate_service_order_totals();

-- Triggers de financials (SEM DELETE)
DROP TRIGGER IF EXISTS trigger_update_financials_on_materials ON service_order_materials;
CREATE TRIGGER trigger_update_financials_on_materials
  AFTER INSERT OR UPDATE ON service_order_materials
  FOR EACH ROW
  EXECUTE FUNCTION update_service_order_financials();

DROP TRIGGER IF EXISTS trigger_update_financials_on_labor ON service_order_labor;
CREATE TRIGGER trigger_update_financials_on_labor
  AFTER INSERT OR UPDATE ON service_order_labor
  FOR EACH ROW
  EXECUTE FUNCTION update_service_order_financials();

RAISE NOTICE '‚úÖ Triggers recriados (apenas INSERT e UPDATE)';

-- =====================================================
-- PARTE 6: MELHORAR FUN√á√ÉO DE DELETE
-- =====================================================

CREATE OR REPLACE FUNCTION delete_service_order_safe(p_order_id uuid)
RETURNS json AS $$
DECLARE
  v_order_exists BOOLEAN;
  v_deleted_items INTEGER := 0;
  v_deleted_materials INTEGER := 0;
  v_deleted_labor INTEGER := 0;
  v_result json;
BEGIN
  -- Verificar se existe
  SELECT EXISTS(SELECT 1 FROM service_orders WHERE id = p_order_id)
  INTO v_order_exists;

  IF NOT v_order_exists THEN
    RETURN json_build_object(
      'success', false,
      'error', 'Ordem de servi√ßo n√£o encontrada'
    );
  END IF;

  -- Desabilitar triggers temporariamente
  SET session_replication_role = replica;

  -- Deletar em ordem
  DELETE FROM service_order_labor WHERE service_order_id = p_order_id;
  GET DIAGNOSTICS v_deleted_labor = ROW_COUNT;

  DELETE FROM service_order_materials WHERE service_order_id = p_order_id;
  GET DIAGNOSTICS v_deleted_materials = ROW_COUNT;

  DELETE FROM service_order_items WHERE service_order_id = p_order_id;
  GET DIAGNOSTICS v_deleted_items = ROW_COUNT;

  DELETE FROM service_order_costs WHERE service_order_id = p_order_id;
  DELETE FROM service_order_documents WHERE service_order_id = p_order_id;
  DELETE FROM audit_log WHERE table_name = 'service_orders' AND record_id = p_order_id;
  DELETE FROM service_orders WHERE id = p_order_id;

  -- Reabilitar triggers
  SET session_replication_role = DEFAULT;

  v_result := json_build_object(
    'success', true,
    'deleted_items', v_deleted_items,
    'deleted_materials', v_deleted_materials,
    'deleted_labor', v_deleted_labor
  );

  RETURN v_result;
EXCEPTION
  WHEN OTHERS THEN
    -- Garantir reativa√ß√£o dos triggers
    SET session_replication_role = DEFAULT;

    RETURN json_build_object(
      'success', false,
      'error', SQLERRM
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

COMMENT ON FUNCTION delete_service_order_safe IS
  'Deleta OS de forma segura, retornando JSON com resultado';

-- =====================================================
-- PARTE 7: FUN√á√ÉO PARA DETECTAR DUPLICA√á√ÉO
-- =====================================================

CREATE OR REPLACE FUNCTION check_service_order_duplicates(p_order_id uuid DEFAULT NULL)
RETURNS TABLE (
  tipo text,
  service_order_id uuid,
  descricao text,
  quantidade_duplicados bigint,
  ids text
) AS $$
BEGIN
  -- Se p_order_id for NULL, verifica tudo
  -- Se n√£o, verifica apenas aquela OS
  RETURN QUERY
  SELECT
    'ITENS' as tipo,
    soi.service_order_id,
    soi.descricao,
    COUNT(*)::bigint as quantidade_duplicados,
    ARRAY_AGG(soi.id::text)::text as ids
  FROM service_order_items soi
  WHERE (p_order_id IS NULL OR soi.service_order_id = p_order_id)
  GROUP BY soi.service_order_id, soi.descricao, soi.unit_price
  HAVING COUNT(*) > 1

  UNION ALL

  SELECT
    'MATERIAIS' as tipo,
    som.service_order_id,
    som.material_name,
    COUNT(*)::bigint,
    ARRAY_AGG(som.id::text)::text
  FROM service_order_materials som
  WHERE (p_order_id IS NULL OR som.service_order_id = p_order_id)
  GROUP BY som.service_order_id, som.material_name, som.quantity
  HAVING COUNT(*) > 1

  UNION ALL

  SELECT
    'MAO_DE_OBRA' as tipo,
    sol.service_order_id,
    sol.nome_funcionario,
    COUNT(*)::bigint,
    ARRAY_AGG(sol.id::text)::text
  FROM service_order_labor sol
  WHERE (p_order_id IS NULL OR sol.service_order_id = p_order_id)
  GROUP BY sol.service_order_id, sol.nome_funcionario, sol.hours
  HAVING COUNT(*) > 1;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;

COMMENT ON FUNCTION check_service_order_duplicates IS
  'Detecta duplicados em itens, materiais e m√£o de obra de OSs';

-- =====================================================
-- PARTE 8: VALIDA√á√ÉO E RELAT√ìRIO
-- =====================================================

DO $$
DECLARE
  v_duplicates_count INTEGER;
  v_triggers_delete_count INTEGER;
  v_functions_count INTEGER;
BEGIN
  -- Contar duplicados restantes
  SELECT COUNT(*) INTO v_duplicates_count
  FROM check_service_order_duplicates();

  -- Contar triggers DELETE
  SELECT COUNT(*) INTO v_triggers_delete_count
  FROM information_schema.triggers
  WHERE event_object_table IN ('service_order_items', 'service_order_materials', 'service_order_labor')
    AND event_manipulation = 'DELETE';

  -- Contar fun√ß√µes criadas
  SELECT COUNT(*) INTO v_functions_count
  FROM information_schema.routines
  WHERE routine_name IN ('delete_service_order_safe', 'check_service_order_duplicates');

  RAISE NOTICE '';
  RAISE NOTICE '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó';
  RAISE NOTICE '‚ïë   CORRE√á√ÉO DEFINITIVA DE DUPLICA√á√ÉO APLICADA       ‚ïë';
  RAISE NOTICE '‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£';
  RAISE NOTICE '‚ïë  ‚úì Triggers DELETE removidos                       ‚ïë';
  RAISE NOTICE '‚ïë  ‚úì Foreign Keys CASCADE configurados               ‚ïë';
  RAISE NOTICE '‚ïë  ‚úì Duplicados limpos                               ‚ïë';
  RAISE NOTICE '‚ïë  ‚úì Fun√ß√£o delete_service_order_safe criada         ‚ïë';
  RAISE NOTICE '‚ïë  ‚úì Fun√ß√£o check_service_order_duplicates criada    ‚ïë';
  RAISE NOTICE '‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£';
  RAISE NOTICE '‚ïë  RESULTADOS:                                       ‚ïë';
  RAISE NOTICE '‚ïë  ‚Ä¢ Duplicados restantes: %                         ‚ïë', LPAD(v_duplicates_count::text, 25);
  RAISE NOTICE '‚ïë  ‚Ä¢ Triggers DELETE ativos: %                       ‚ïë', LPAD(v_triggers_delete_count::text, 23);
  RAISE NOTICE '‚ïë  ‚Ä¢ Fun√ß√µes de seguran√ßa: %                         ‚ïë', LPAD(v_functions_count::text, 25);
  RAISE NOTICE '‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£';
  RAISE NOTICE '‚ïë  COMO USAR:                                        ‚ïë';
  RAISE NOTICE '‚ïë  ‚Ä¢ Deletar OS:                                     ‚ïë';
  RAISE NOTICE '‚ïë    SELECT delete_service_order_safe(''uuid'');      ‚ïë';
  RAISE NOTICE '‚ïë  ‚Ä¢ Verificar duplicados:                           ‚ïë';
  RAISE NOTICE '‚ïë    SELECT * FROM check_service_order_duplicates(); ‚ïë';
  RAISE NOTICE '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù';
  RAISE NOTICE '';

  IF v_duplicates_count > 0 THEN
    RAISE WARNING 'Ainda existem % duplicados! Execute check_service_order_duplicates() para ver', v_duplicates_count;
  END IF;

  IF v_triggers_delete_count > 0 THEN
    RAISE WARNING 'Ainda existem % triggers DELETE ativos!', v_triggers_delete_count;
  END IF;
END $$;
